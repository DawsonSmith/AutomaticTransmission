// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "GearShift.h"
#include "../RobotMap.h"
#include "../Commands/PneumaticShift.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

GearShift::GearShift() : Subsystem("GearShift") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    gearShifter = RobotMap::gearShiftGearShifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    counter = new Counter(1);
    counter->SetMaxPeriod(60);
    // counter->SetSemiPeriodMode(true);
    gearShifter->Set(false);
    //counter->SetSamplesToAverage(1);
        /*
        counter->SetSemiPeriodMode(false);
        counter->SetMaxPeriod(.1);
        counter->SetUpdateWhenEmpty(true);
        counter->SetReverseDirection(false);
        counter->SetSamplesToAverage(10);
        counter->SetPulseLengthMode(.1);
        */
}

void GearShift::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    SetDefaultCommand(new PneumaticShift());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void GearShift::Shift(){
	//upgear tells the if statement what gear the robot is on true=switched for high rpm

	if(i>0){
	period = counter->GetPeriod();
	}
	/*
	double rpm = (1.0/(period))*60.0;
	i++;
	if(i%5==0){
	printf("period %4.7f ",period);
	printf("rpm %4.7f \n",rpm);
	}
	if(rpm>1000 && !upgear){
		gearShifter->Set(true);
		upgear=true;
	}
	if(rpm<500 && upgear){
		gearShifter->Set(false);
		upgear= false;
	}
	*/

	double rpm = (1.0/(period))*60.0;
	i++;
	if(i%5==0){
	printf("period %4.7f ",period);
	printf("rpm %4.7f ",rpm);
	printf("i-value %i \n", i);
	}

	//METHOD CALLED 50 TIMES A SEC i=50 IS ONE SEC delay for another shift
	//using period works much better than using rpms in the if statements
	//calculate rpm with (1.0/(period))*60.0 and use that
	if(period<.04 && !upgear && i>40){
		gearShifter->Set(true);
		upgear=true;
		printf("GEAR UP+++++++++++++++++++++++ %4.7f \n", period);
		i = -5;
	}
	if(period>.17 && upgear && i>40){
		gearShifter->Set(false);
		upgear= false;
		printf("GEAR DOWN--------------- %4.7f \n", period);
		i = -5;
	}


}


// Put methods for controlling this subsystem
// here. Call these from Commands.

